name: 'C'
scopeName: 'source.c'
type: 'tree-sitter'
parser: 'tree-sitter-c'

injectionRegex: 'c|C'

fileTypes: [
  'h'
  'c'
  'h.in'
]

folds: [
  {
    type: ['comment', 'preproc_arg']
  }
  {
    type: ['preproc_if', 'preproc_ifdef', 'preproc_elif'],
    end: {type: ['preproc_else', 'preproc_elif']}
  }
  {
    type: ['preproc_if', 'preproc_ifdef'],
    end: {index: -1}
  }
  {
    type: ['preproc_else', 'preproc_elif']
    start: {index: 0}
  }
  {
    type: [
      'enumerator_list'
      'compound_statement'
      'declaration_list'
      'field_declaration_list'
      'parameter_list'
      'argument_list'
      'initializer_list'
      'parenthesized_expression'
      'template_parameter_list'
      'template_argument_list'
    ]
    start: {index: 0}
    end: {index: -1}
  }
  {
    type: 'case_statement'
    start: {index: 0}
    end: {type: 'break_statement', index: -1}
  }
  {
    type: 'case_statement'
    start: {index: 0}
  }
]

comments:
  start: '// '

scopes:
  'translation_unit': 'source.c'

  # Keyword
  '"#if"': 'keyword.control.directive'
  '"#ifdef"': 'keyword.control.directive'
  '"#ifndef"': 'keyword.control.directive'
  '"#elif"': 'keyword.control.directive'
  '"#else"': 'keyword.control.directive'
  '"#endif"': 'keyword.control.directive'
  '"#define"': 'keyword.control.directive'
  '"#include"': 'keyword.control.directive'
  'preproc_directive': 'keyword.control.directive'
  '"__attribute__"': 'keyword.control.directive'

  '"if"': 'keyword.control.condition'
  '"else"': 'keyword.control.condition'
  '"switch"': 'keyword.control.condition'
  '"case"': 'keyword.control.condition'
  '"default"': 'keyword.control.condition'
  '"do"': 'keyword.control.loop'
  '"for"': 'keyword.control.loop'
  '"while"': 'keyword.control.loop'
  '"break"': 'keyword.control.jump'
  '"continue"': 'keyword.control.jump'
  '"return"': 'keyword.control.jump'
  '"goto"': 'keyword.control.jump'

  '"sizeof"': 'keyword.operator.sizeof'

  '"+"': 'keyword.operator.arithmetic.symbolic'
  '"-"': 'keyword.operator.arithmetic.symbolic'
  'binary_expression > "*"': 'keyword.operator.arithmetic.symbolic'
  '"/"': 'keyword.operator.arithmetic.symbolic'
  '"%"': 'keyword.operator.arithmetic.symbolic'
  '"++"': 'keyword.operator.arithmetic.symbolic'
  '"--"': 'keyword.operator.arithmetic.symbolic'

  'binary_expression > "&"': 'keyword.operator.bitwise.symbolic'
  '"|"': 'keyword.operator.bitwise.symbolic'
  '"^"': 'keyword.operator.bitwise.symbolic'
  '"~"': 'keyword.operator.bitwise.symbolic'
  '"<<"': 'keyword.operator.bitwise.shift.symbolic'
  '">>"': 'keyword.operator.bitwise.shift.symbolic'

  '"="': 'keyword.operator.assignment.symbolic'
  '"+="': 'keyword.operator.assignment.compound.symbolic'
  '"-="': 'keyword.operator.assignment.compound.symbolic'
  '"*="': 'keyword.operator.assignment.compound.symbolic'
  '"/="': 'keyword.operator.assignment.compound.symbolic'
  '"%="': 'keyword.operator.assignment.compound.symbolic'
  '"<<="': 'keyword.operator.assignment.compound.symbolic'
  '">>="': 'keyword.operator.assignment.compound.symbolic'
  '"&="': 'keyword.operator.assignment.compound.symbolic'
  '"|="': 'keyword.operator.assignment.compound.symbolic'
  '"^="': 'keyword.operator.assignment.compound.symbolic'

  '"=="': 'keyword.operator.comparison.symbolic'
  '"!="': 'keyword.operator.comparison.symbolic'
  '"<"': 'keyword.operator.comparison.symbolic'
  '">"': 'keyword.operator.comparison.symbolic'
  '"<="': 'keyword.operator.comparison.symbolic'
  '">="': 'keyword.operator.comparison.symbolic'

  '"!"': 'keyword.operator.logical.symbolic'
  '"&&"': 'keyword.operator.logical.symbolic'
  '"||"': 'keyword.operator.logical.symbolic'

  '"&"': 'keyword.operator.pointer.reference.symbolic'
  '"*"': 'keyword.operator.pointer.dereference.symbolic'

  '"?"': 'keyword.operator.ternary.symbolic'
  'conditional_expression > ":"': 'keyword.operator.ternary.symbolic'

  '"unsigned"': 'keyword.type.fundamental'
  '"signed"': 'keyword.type.fundamental'
  '"short"': 'keyword.type.fundamental'
  '"long"': 'keyword.type.fundamental'
  'primitive_type': 'keyword.type.fundamental'

  '"typedef"': 'keyword.storage.declaration'
  '"struct"': 'keyword.storage.declaration'
  '"enum"': 'keyword.storage.declaration'
  '"union"': 'keyword.storage.declaration'

  '"extern"': 'keyword.storage.modifier'
  '"static"': 'keyword.storage.modifier'
  '"register"': 'keyword.storage.modifier'
  '"inline"': 'keyword.storage.modifier'
  '"const"': 'keyword.storage.modifier'
  '"volatile"': 'keyword.storage.modifier'
  '"restrict"': 'keyword.storage.modifier'
  '"_Atomic"': 'keyword.storage.modifier'
  '"auto"': 'keyword.storage.modifier'
  'function_specifier': 'keyword.storage.modifier'

  # Entity
  'type_identifier': 'entity.type'

  'identifier': [
    {
      match: '^[A-Z\\d_]+$',
      scopes: 'entity.variable.immutable'
    },
    'entity.variable'
  ]

  'field_identifier': [
    {
      match: '^[A-Z\\d_]+$',
      scopes: 'entity.variable.member.immutable'
    },
    'entity.variable.member'
  ]

  'statement_identifier': 'entity.label'

  '''
  preproc_function_def > identifier:nth-child(1),
  function_declarator > identifier
  ''': 'entity.function'

  '''
  call_expression > identifier,
  call_expression > field_expression > field_identifier
  ''': 'entity.function.call'

  # String
  'string_literal': 'string.quoted'
  'system_lib_string': 'string.quoted'

  # Constant
  'char_literal': 'constant.character'
  'escape_sequence': [
    {
      match: '^\\\\[uUxftvnrabe0-9]',
      scopes: 'constant.character.escape.code'
    },
    'constant.character.escape'
  ]
  'preproc_include > string_literal > escape_sequence': '' # No escape characters in include directive

  'number_literal': 'constant.numeric.decimal'

  'null': 'constant.language.null'
  'true': 'constant.language.boolean.true'
  'false': 'constant.language.boolean.false'

  # Comment
  'comment': 'comment.block'

  # Punctuation
  '"."': 'punctuation.accessor.member'
  '"->"': 'punctuation.accessor.member'
  '","': 'punctuation.separator'
  '";"': 'punctuation.terminator'
  '":"': 'punctuation.delimiter'
  '"("': 'punctuation.delimiter'
  '")"': 'punctuation.delimiter'
  '"{"': 'punctuation.delimiter'
  '"}"': 'punctuation.delimiter'
  '"["': 'punctuation.delimiter'
  '"]"': 'punctuation.delimiter'
  '"..."': 'punctuation.definition.variadic'
  'char_literal > "\'"': 'punctuation.definition.constant.character'
  'string_literal > "\\""': 'punctuation.definition.string'

  'array_declarator > "["': 'punctuation.delimiter.array.size'
  'array_declarator > "]"': 'punctuation.delimiter.array.size'
  'abstract_array_declarator > "["': 'punctuation.delimiter.array.size'
  'abstract_array_declarator > "]"': 'punctuation.delimiter.array.size'

  'subscript_expression > "["': 'punctuation.delimiter.subscript'
  'subscript_expression > "]"': 'punctuation.delimiter.subscript'
  'subscript_designator > "["': 'punctuation.delimiter.subscript'
  'subscript_designator > "]"': 'punctuation.delimiter.subscript'

  'initializer_list > "{"': 'punctuation.definition.collection'
  'initializer_list > "}"': 'punctuation.definition.collection'

  'compound_statement > "{"': 'punctuation.delimiter.statement'
  'compound_statement > "}"': 'punctuation.delimiter.statement'

  'function_definition > compound_statement > "{"': 'punctuation.delimiter.body.function'
  'function_definition > compound_statement > "}"': 'punctuation.delimiter.body.function'

  'enumerator_list > "{"': 'punctuation.delimiter.body.enumeration'
  'enumerator_list > "}"': 'punctuation.delimiter.body.enumeration'

  'union_specifier > field_declaration_list > "{"': 'punctuation.delimiter.body.union'
  'union_specifier > field_declaration_list > "}"': 'punctuation.delimiter.body.union'

  'struct_specifier > field_declaration_list > "{"': 'punctuation.delimiter.body.structure'
  'struct_specifier > field_declaration_list > "}"': 'punctuation.delimiter.body.structure'

  'preproc_params > "("': 'punctuation.delimiter.parameters'
  'preproc_params > ")"': 'punctuation.delimiter.parameters'

  'parameter_list > "("': 'punctuation.delimiter.parameters'
  'parameter_list > ")"': 'punctuation.delimiter.parameters'
  'argument_list > "("': 'punctuation.delimiter.arguments'
  'argument_list > ")"': 'punctuation.delimiter.arguments'

  'sizeof_expression > "("': 'punctuation.delimiter.arguments'
  'sizeof_expression > ")"': 'punctuation.delimiter.arguments'
  'sizeof_expression > parenthesized_expression > "("': 'punctuation.delimiter.arguments'
  'sizeof_expression > parenthesized_expression > ")"': 'punctuation.delimiter.arguments'

  'attribute_specifier > "("': 'punctuation.delimiter.arguments'
  'attribute_specifier > ")"': 'punctuation.delimiter.arguments'

  'cast_expression > "("': 'punctuation.delimiter.cast'
  'cast_expression > ")"': 'punctuation.delimiter.cast'

  'compound_literal_expression > "("': 'punctuation.delimiter.expression'
  'compound_literal_expression > ")"': 'punctuation.delimiter.expression'

  'parenthesized_expression > "("': 'punctuation.delimiter.expression'
  'parenthesized_expression > ")"': 'punctuation.delimiter.expression'

  'for_statement > "("': 'punctuation.delimiter.expression'
  'for_statement > ")"': 'punctuation.delimiter.expression'

  'ERROR > "."': 'punctuation.accessor.member.invalid.illegal'
  'ERROR > "->"': 'punctuation.accessor.member.invalid.illegal'
  'ERROR > ","': 'punctuation.separator.invalid.illegal'
  'ERROR > ";"': 'punctuation.terminator.invalid.illegal'
  'ERROR > ":"': 'punctuation.delimiter.invalid.illegal'
  'ERROR > "("': 'punctuation.delimiter.invalid.illegal'
  'ERROR > ")"': 'punctuation.delimiter.invalid.illegal'
  'ERROR > "{"': 'punctuation.delimiter.invalid.illegal'
  'ERROR > "}"': 'punctuation.delimiter.invalid.illegal'
  'ERROR > "["': 'punctuation.delimiter.invalid.illegal'
  'ERROR > "]"': 'punctuation.delimiter.invalid.illegal'
  'ERROR > "..."': 'punctuation.definition.variadic.invalid.illegal'
  'ERROR > "\'"': 'punctuation.definition.constant.character.invalid.illegal'
  'ERROR > "\\""': 'punctuation.definition.string.invalid.illegal'
