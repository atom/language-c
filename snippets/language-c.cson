'.source.c, .source.cpp, .source.objc, .source.objcpp':
  'True or False':
    'prefix': '?'
    'body': '(${1:something})?${2:1}:${3:0};'
  '#def':
    'prefix': 'd'
    'body': '#define ${1:ll} $2'
  '#ifndef … #define … #endif':
    'prefix': 'def'
    'body': '#ifndef ${1:SYMBOL}\n#define $1 ${2:value}\n#endif'
  '#include <>':
    'prefix': 'inc'
    'body': '#include <${1:.h}>'
  '#include ""':
    'prefix': 'Inc'
    'body': '#include "${1:.h}"'
  '#pragma mark':
    'prefix': 'mark'
    'body': '#if 0\n${1:#pragma mark -\n}#pragma mark $2\n#endif\n\n$0'
  'main()':
    'prefix': 'main'
    'body': 'int main() {\n\t${1:/* code */}\n\treturn 0;\n}'
  'For Loop Increase':
    'prefix': 'fori'
    'body': 'for (size_t ${1:i} = 0; ${1:i} < ${2:count}; ${1:i}++) {\n\t${4:/* code */}\n}'
  'For Loop Decrease':
    'prefix': 'ford'
    'body': 'for (size_t ${1:i} = ${2:n-1}; ${1:i} > ${3:count}; ${1:i}--) {\n\t${4:/* code */}\n}'
  'Cout':
    'prefix':'o'
    'body': 'cout << ${1:i} << endl;'
  'Cin':
    'prefix':'i'
    'body': 'cin >> ${1:i};'
  'For Cout Array':
    'prefix': 'oa'
    'body': 'for (size_t ${1:i} = 0; ${1:i} < ${2:n}; ${1:i}++) {\n\tcout << ${3:a}[${1:i}] << " ";\n}'
  'For Cout Array 2D':
    'prefix': 'oa2'
    'body': 'for (size_t ${1:i} = 0; ${1:i} < ${2:n}; ${1:i}++) {\n\tfor (size_t ${3:j} = ${4:0}; ${3:j} < ${5:n}; ${3:j}++) {\n\tcout << ${6:a}[${1:i}][${3:j}] << " ";\n}cout << endl;\n}'
  'For Cin Array 2D':
    'prefix': 'ia2'
    'body': 'for (size_t ${1:i} = 0; ${1:i} < ${2:n}; ${1:i}++) {\n\tfor (size_t ${3:j} = ${4:0}; ${3:j} < ${5:n}; ${3:j}++) {\n\tcin >> ${6:a}[${1:i}][${3:j}];\n}\n}'
  'For Cin Array':
    'prefix': 'ia'
    'body': 'for (size_t ${1:i} = 0; ${1:i} < ${2:n}; ${1:i}++) {\n\tcin >> ${3:a}[${1:i}];\n}'
  'Header Include-Guard':
    'prefix': 'once'
    'body': '#ifndef ${1:SYMBOL}\n#define $1\n\n${2}\n\n#endif /* end of include guard: $1 */\n'
  'Shared Pointer':
    'prefix': 'sp'
    'body': 'typedef std::shared_ptr<${2:${1:my_type}_t}> ${3:${4:my_type}_ptr};'
  'Typedef':
    'prefix': 'td'
    'body': 'typedef ${1:int} ${2:MyCustomType};'
  'Do While Loop':
    'prefix': 'do'
    'body': 'do {\n\t${0:/* code */}\n} while(${1:/* condition */});'
  'While Loop':
    'prefix': 'w'
    'body': 'while (${1:/* condition */}) {\n\t${2:/* code */}\n}'
  'fprintf':
    'prefix': 'fprintf'
    'body': 'fprintf(${1:stderr}, "${2:%s}\\\\n", $3);$4'
  'If Condition':
    'prefix': 'if'
    'body': 'if (${1:/* condition */}) {\n\t${2:/* code */}\n}'
  'Else Condition':
    'prefix': 'else'
    'body': 'else {\n\t${2:/* code */}\n}'
  'If Else':
    'prefix': 'ife'
    'body': 'if (${1:/* condition */}) {\n\t${2:/* code */}\n} else {\n\t${3:/* code */}\n}'
  'If ElseIf':
    'prefix': 'iff'
    'body': 'if (${1:/* condition */}) {\n\t${2:/* code */}\n} else if (${3:/* condition */}) {\n\t${4:/* code */}\n}'
  'If ElseIf Else':
    'prefix': 'iffe'
    'body': 'if (${1:/* condition */}) {\n\t${2:/* code */}\n} else if (${3:/* condition */}) {\n\t${4:/* code */}\n} else {\n\t${5:/* code */}\n}'
  'Switch Statement':
    'prefix': 'switch'
    'body': 'switch (${1:/* expression */}) {\n\tcase ${2:/* value */}:\n}'
  'case':
    'prefix': 'cs'
    'body': 'case ${1:/* value */}:$0'
  'printf':
    'prefix': 'printf'
    'body': 'printf("${1:%s}\\\\n", $2);$3'
  'scanf':
    'prefix': 'scanf'
    'body': 'scanf(\"${1:%s}\\\\n\", $2);$3'
  'Struct':
    'prefix': 'st'
    'body': 'struct ${1:name_t} {\n\t${2:/* data */}\n};'
  'void':
    'prefix': 'void'
    'body': 'void ${1:name}(${2:/* arguments */}) {\n\t${3:/* code */}\n}'
  'any function':
    'prefix': 'func'
    'body': '${1:int} ${2:name}(${3:/* arguments */}) {\n\t${5:/* code */}\n\treturn ${4:0};\n}'
  'write file':
    'prefix': 'wf'
    'body': 'FILE *${1:fp};\n${1:fp} = fopen ("${2:filename.txt}","w");\nif (${1:fp}!=NULL)\n{\n\tfprintf(${1:fp},"${3:Some String\\\\n}");\n\tfclose (${1:fp});\n}'
  'read file':
    'prefix': 'rf'
    'body': 'FILE *${1:fp};\n${1:fp} = fopen ("${2:filename.txt}","r");\nif (${1:fp}!=NULL)\n{\n\tfscanf(${1:fp},"${3:Some String\\\\n}", ${3:&var});\n\tfclose (${1:fp});\n}'
'.source.cpp, .source.objcpp':
  'Enumeration':
    'prefix': 'enum'
    'body': 'enum ${1:name} { $0 };'
  'Class':
    'prefix': 'cl'
    'body': 'class ${1:name_t} {\nprivate:\n\t${0:/* data */}\n\npublic:\n\t${1:name_t} (${2:arguments});\n\tvirtual ~${1:name_t} ();\n};'
  'Namespace':
    'prefix': 'ns'
    'body': 'namespace ${1:name} {\n\t$2\n} /* $1 */'
  'cout':
    'prefix': 'cout'
    'body': 'cout << \"${1:/* message */}\" << \'\\\\n\';'
  'cin':
    'prefix': 'cin'
    'body': 'cin >> ${1:/* variable */};'
  'cerr':
    'prefix': 'cerr'
    'body': 'cerr << \"${1:/* error message */}\" << \'\\\\n\';'
  'return 1':
    'prefix': 'r1'
    'body': 'return 1;'
  'return 0':
    'prefix': 'r0'
    'body': 'return 0;'
  'return':
    'prefix': 'r'
    'body': 'return {1:/*something*/};'
  'std::map':
    'prefix': 'map'
    'body': 'map<${1:key}, ${2:value}> map$3;'
  'std::stack':
    'prefix': 'stack'
    'body': '#include <stack>'
  'std::stack':
    'prefix': 'que'
    'body': '#include <queue>'
  'string':
    'prefix': 'string'
    'body': '#include <string>'
  'std::algorithm':
    'prefix': '#include <algorithm>'
    'body': 'string'
  'std::string':
    'prefix': 'str'
    'body': 'string'
  'std::vector int n':
    'prefix': 'vec'
    'body': 'vector<${1:int}> v$2 (${2:n});'
  'std::vector int':
    'prefix': 'vect'
    'body': 'vector<${1:int}> v$2;'
  'std::vector 2D int':
    'prefix': 'vect2'
    'body': 'vector< vector <${1:int}> > v$2;'
  'std::vector 2D int n':
    'prefix': 'vec2'
    'body': 'vector< vector <${1:int}> > v$2 (${3:n}, vector <${1:int}>(${4:m}));'
  'template <typename>':
    'prefix': 'tp'
    'body': 'template <typename ${1:T}>'
  'output file':
    'prefix': 'outf'
    'body': 'ofstream ${1:afile}("${2:filename.txt}", std::ios::out);\nif (${1:afile}.is_open()) {\n\t${1:afile} << "${3:This is a line.}\\\\n";\n\t${1:afile}.close();\n}'
  'input file':
    'prefix': 'inf'
    'body': 'ifstream ${1:afile}("${2:filename.txt}", std::ios::in);\nif (${1:afile}.is_open()) {\n\tstd::string line;\n\twhile (std::getline(${1:afile}, line)) {\n\t\tstd::cout << line << \'\\\\n\';\n\t}\n\t${1:afile}.close();\n}\nelse {\n\tstd::cerr << "Unable to open file\\\\n";\n}'
  'basic include':
    'prefix': 'c'
    'body': '#include <iostream>\n#include <cmath>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n\t${1:/* code */}\n\treturn 0;\n}'
  'test include':
    'prefix': 'ct'
    'body': '#include <iostream>\n#include <cmath>\n#include <algorithm>\n#include <cstdlib>\nusing namespace std;\n\nint main() {\n\t${1:/* code */}\n\treturn 0;\n}'
 
    
