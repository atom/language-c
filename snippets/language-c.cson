'.source.c, .source.c\\+\\+, .source.objc, .source.objc\\+\\+':
  '#ifndef … #define … #endif':
    'prefix': 'def'
    'body': '#ifndef ${1:SYMBOL}\n#define $1 ${2:value}\n#endif'
  '#include <>':
    'prefix': 'Inc'
    'body': '#include <${1:.h}>'
  '#include ""':
    'prefix': 'inc'
    'body': '#include "${1:.h}"'
  '#pragma mark':
    'prefix': 'mark'
    'body': '#if 0\n${1:#pragma mark -\n}#pragma mark $2\n#endif\n\n$0'
  'main()':
    'prefix': 'main'
    'body': 'int main (int argc, char const *argv[])\n{\n\t${1:/* code */}\n\treturn 0;\n}'
  'For Loop':
    'prefix': 'for'
    'body': 'for(size_t ${1:i} = 0; $1 < ${2:count}; $1${3:++})\n{\n\t${4:/* code */}\n}'
  'Header Include-Guard':
    'prefix': 'owhce'
    'body': '#ifndef ${1:SYMBOL}\n#define $1\n\n${2}\n\n#endif /* end of include guard: $1 */\n'
  'Shared Pointer':
    'prefix': 'sp'
    'body': 'typedef std::shared_ptr<${2:${1:my_type}_t}> ${3:${4:my_type}_ptr};'
  'Typedef':
    'prefix': 'td'
    'body': 'typedef ${1:int} ${2:MyCustomType};'
  'Do While Loop':
    'prefix': 'do'
    'body': 'do {\n\t${0:/* code */}\n} while(${1:/* condition */});'
  'While Loop':
    'prefix': 'while'
    'body': 'while(${1:/* condition */})\n{\n\t${2:/* code */}\n}'
  'fprintf':
    'prefix': 'fprintf'
    'body': 'fprintf(${1:stderr}, "${2:%s}\\n", $3);$4'
  'If Condition':
    'prefix': 'if'
    'body': 'if(${1:/* condition */})\n{\n\t${2:/* code */}\n}'
  'printf':
    'prefix': 'printf'
    'body': 'printf("${1:%s}\\n", $2);$3'
  'Struct':
    'prefix': 'st'
    'body': 'struct ${1:name_t}\n{\n\t${2:/* data */}\n};'
  'void':
    'prefix': 'void'
    'body': 'void ${1:name} (${2:/* arguments */})\n{\n\t${3:/* code */}\n}'
  'any function':
    'prefix': 'func'
    'body': '${1:int} ${2:name} (${3:/* arguments */})\n{\n\t${5:/* code */}\n\treturn ${4:0};\n}'
'.source.c\\+\\+, .source.objc\\+\\+':
  'Enumeration':
    'prefix': 'enum'
    'body': 'enum ${1:name} { $0 };'
  'Class':
    'prefix': 'cl'
    'body': 'class ${1:name_t}\n{\npublic:\n\t${1:name_t} (${2:arguments});\n\tvirtual ~${1:name_t} ();\n\nprivate:\n\t${0:/* data */}\n};'
  'Namespace':
    'prefix': 'ns'
    'body': 'namespace ${1:name}\n{\n\t$2\n} /* $1 */'
  'std::map':
    'prefix': 'map'
    'body': 'std::map<${1:key}, ${2:value}> map$3;'
  'std::string':
    'prefix': 'str'
    'body': 'std::string'
  'std::vector':
    'prefix': 'vector'
    'body': 'std::vector<${1:char}> v$2;'
  'template <typename>':
    'prefix': 'tp'
    'body': 'template <typename ${1:_InputIter}>'
